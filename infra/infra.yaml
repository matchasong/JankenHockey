AWSTemplateFormatVersion: '2010-09-09'
Description: WebHosting for JankenHockey with Origin Access Control

Parameters:
  LambdaBucket:
    Type: String
    Description: S3 bucket name for Lambda function Zip file.
  LambdaZipFile:
    Type: String
    Description: Lambda function Zip Package file name.

Resources:
  ############################
  # WebHosting
  ############################
  ## S3
  # S3バケット
  JankenHockeyBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: janken-hockey-website-bucket
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Project
          Value: JankenHockey

  # S3バケットポリシー
  JankenHockeyBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref JankenHockeyBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowCloudFrontAccess
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action:
              - s3:GetObject
            Resource: !Sub 'arn:aws:s3:::${JankenHockeyBucket}/*'
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${JankenHockeyCloudFrontDistribution}'
  
  ## CloudFront
  # オリジンアクセスコントロール
  JankenHockeyOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: JankenHockeyOAC
        OriginAccessControlOriginType: s3
        SigningProtocol: sigv4
        SigningBehavior: always

  # CloudFrontディストリビューション
  JankenHockeyCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt JankenHockeyBucket.DomainName
            S3OriginConfig:
              OriginAccessIdentity: ''
            OriginAccessControlId: !Ref JankenHockeyOriginAccessControl
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
          CachedMethods:
            - GET
            - HEAD
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
        DefaultRootObject: index.html
      Tags:
        - Key: Project
          Value: JankenHockey

  ############################
  # API
  ############################
  ## DynamoDB
  # DynamoDB
  JankenHockeyGameHistoryTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: GameHistory
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      Tags:
        - Key: Project
          Value: JankenHockey

  ## Lambda
  # Lambda関数
  JankenHockeyFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: JankenHockeyFunction
      Handler: main.handler
      Role: !GetAtt JankenHockeyFunctionRole.Arn
      Code:
        S3Bucket: !Ref LambdaBucket
        S3Key: !Ref LambdaZipFile
      Runtime: python3.12
      Timeout: 30
      Tags:
        - Key: Project
          Value: JankenHockey

  # Lambda関数ロール
  JankenHockeyFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: JankenHockeyFunctionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: JankenHockeyFunctionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                Resource: !GetAtt JankenHockeyGameHistoryTable.Arn
              - Effect: Allow
                Action:
                  - execute-api:Invoke
                Resource: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${JankenHockeyAPI}/*/*/*

  ## API Gateway
  # API Gateway IAMロール
  JankenHockeyAPIRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: JankenHockeyAPIRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: JankenHockeyAPIPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt JankenHockeyFunction.Arn
  # API
  JankenHockeyAPI:
    Type: 'AWS::ApiGatewayV2::Api'
    Properties:
      Name: MyApi
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: $request.body.action
      ApiKeySelectionExpression: $request.header.x-api-key
  
  # API Gateway ロググループ
  MyLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join
        - '-'
        - - !Ref JankenHockeyAPI
          - access-logs

  # API Gateway デフォルトルート
  JankenHockeyAPIDefaultRoute:
    Type: 'AWS::ApiGatewayV2::Route'
    Properties:
      ApiId: !Ref JankenHockeyAPI
      RouteKey: $default
      Target: !Sub 'integrations/${JankenHockeyAPIIntegration}'

  # API Gateway デフォルト統合
  JankenHockeyAPIIntegration:
    Type: 'AWS::ApiGatewayV2::Integration'
    Properties:
      ApiId: !Ref JankenHockeyAPI
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${JankenHockeyFunction.Arn}/invocations'
      PayloadFormatVersion: '2.0'

  # Lambda権限
  JankenHockeyPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt JankenHockeyFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${JankenHockeyAPI}/*/*/*

  # API Gateway デプロイメント
  JankenHockeyAPIDeployment:
    Type: 'AWS::ApiGatewayV2::Deployment'
    Properties:
      ApiId: !Ref JankenHockeyAPI
    DependsOn:
      - JankenHockeyAPIDefaultRoute
      - JankenHockeyAPIIntegration

  # API Gateway ステージおよびログ出力設定
  JankenHockeyAPIStage:
    Type: 'AWS::ApiGatewayV2::Stage'
    Properties:
      ApiId: !Ref JankenHockeyAPI
      DeploymentId: !Ref JankenHockeyAPIDeployment
      StageName: prod
      DefaultRouteSettings:
        DetailedMetricsEnabled: true
        LoggingLevel: INFO
        DataTraceEnabled: false
        ThrottlingBurstLimit: 10
        ThrottlingRateLimit: 10
      AccessLogSetting:
        DestinationArn: !GetAtt MyLogGroup.Arn
        Format: $context.extendedRequestId $context.identity.sourceIp $context.identity.caller $context.identity.user [$context.requestTime] "$context.httpMethod $context.resourcePath $context.protocol" $context.status $context.responseLength $context.requestId
